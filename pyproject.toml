[project]
name = "neural-pipeline-search"
version = "v0.13.0"
description = "Neural Pipeline Search helps deep learning experts find the best neural pipeline."
authors = [
    { name = "Danny Stoll", email = "stolld@cs.uni-freiburg.de" },
    { name = "Neeratyoy Mallik", email = "mallik@cs.uni-freiburg.de" },
    { name = "Eddie Bergman" },
    { name = "Simon Schrodi" },
    { name = "Samir Garibov" },
    { name = "Tarek Abou Chakra" },
    { name = "Timur Carstensen" },
    { name = "Maciej Janowski" },
    { name = "Gopalji Gaur" },
    { name = "Anton Merlin Geburek" },
    { name = "Daniel Rogalla" },
    { name = "Carl Hvarfner" },
    { name = "Binxin Ru" },
    { name = "Frank Hutter" },
]
readme = "README.md"
license = { file = "LICENSE" }
keywords = [
    "Deep Learning",
    "Neural Pipeline Search",
    "Neural Architecture Search",
    "Hyperparameter Optimization",
    "AutoML",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: System :: Distributed Computing",
]
requires-python = ">=3.10,<3.13"

dependencies = [
    "numpy>=1.0,<2.0",
    "pandas>=2.0,<3.0",
    "networkx>=2.6.3,<3.0",
    "scipy>=1.13.1",
    "torch>=2.0.1",
    "matplotlib>=3.0,<4.0",
    "more-itertools",
    "portalocker>=2.0,<3.0",
    "seaborn>=0.13,<0.14",
    "pyyaml>=6.0,<7.0",
    "tensorboard>=2.0,<3.0",
    "typing-extensions",
    "torchvision>=0.8.0",
    "ifbo>=0.3.10",
    "botorch>=0.12",
    "gpytorch==1.13.0",
]

[project.urls]
homepage = "https://github.com/automl/neps"
repository = "https://github.com/automl/neps"
documentation = "https://automl.github.io/neps/"

[project.optional-dependencies]
dev = [
    "ruff",
    "pre-commit>=3,<4",
    "mypy>=1,<2",
    "pytest>=7,<8",
    "pytest-cases>=3,<4",
    "types-PyYAML>=6,<7",
    "mkdocs-material",
    "mkdocs-autorefs",
    "mkdocs-gen-files",
    "mkdocstrings[python]",
    "mkdocs-literate-nav",
    "pymdown-extensions", # For math in markdown
    "mike",
    "black",  # This allows mkdocstrings to format signatures in the docs
]

[tool.setuptools.packages.find]
include = [
    "neps",
    "neps.*",
    "neps_examples",
]
exclude = []

[build-system]
requires = [
    "setuptools>=68.2.2",
    "wheel>=0.41.2",
]

build-backend = "setuptools.build_meta"

[tool.ruff]
target-version = "py310"
output-format = "full"
line-length = 90
src = ["neps"]

exclude = [
    "neps_examples",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
]

[tool.ruff.lint]
# Extend what ruff is allowed to fix, even if it may break
# This is okay given we use it all the time and it ensures
# better practices. Would be dangerous if using for first
# time on established project.
extend-safe-fixes = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

select = [
    "A",
    # "ANN", # Handled by mypy
    "ARG",
    "B",
    "BLE",
    "COM",
    "C4",
    "D",
    # "DTZ",  # One day I should know how to utilize timezones and dates...
    "E",
    # "EXE", Meh
    "ERA",
    "F",
    "FBT",
    "I",
    # "ISC",  # Favours implicit string concatenation
    "INP",
    # "INT", # I don't understand this one
    "N",
    "NPY",
    "PD",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PIE",
    "PT",
    "PTH",
    # "PYI", # Specific to .pyi files for type stubs
    "Q",
    "PGH004",
    "RET",
    "RUF",
    "C90",
    "S",
    # "SLF",    # Private member accessed (sure, it's python)
    "SIM",
    # "TRY", # Good in principle, would take a lot of work to statisfy
    "T10",
    "T20",
    "TID",
    "TCH",
    "UP",
    "N",
    "W",
    "YTT",
]

ignore = [
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic mthod
  "D203",    # 1 blank line required before class docstring
  "D205",    # 1 blank line between summary and description
  "D401",    # First line of docstring should be in imperative mood
  "N806",    # Variable X in function should be lowercase
  "E731",    # Do not assign a lambda expression, use a def
  "A003",    # Shadowing a builtin
  "S101",    # Use of assert detected.
  "W292",    # No newline at end of file
  "PLC1901", # "" can be simplified to be falsey
  "TC003",   # Move stdlib import into TYPE_CHECKING
  "B010",    # Do not use `setattr`
  "PD901",   # Use a better name than 'df'
  "PD011",   # Use .to_numpy() instead of .values  (triggers on report.values)
  "PD008",   # Use `.loc` instead of `.at`. If speed is important, use NumPy.
  "COM812",  # Require trailing commas, recommended to ignore due to ruff formatter
  "PLR2004", # No magic numbers inline
  "N817",    # CamelCase import as (ignore for ConfigSpace)
  "N999",    # Invalid name for module
  "NPY002",  # Replace legacy `np.random.choice` call with `np.random.Generator`
  "N803",    # Arguments should start with a lower case letter.
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
  "E741",    # `l` is an ambiguous variable name
]


# Exclude a variety of commonly ignored directories.
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101",
    "D101",
    "D102",
    "D103",
    "ANN001",
    "ANN201",
    "FBT001",
    "D100",
    "PD901", #  X is a bad variable name. (pandas)
    "TCH",
    "N803",
    "C901", # Too complex
    "PT011", # Catch value error to broad
    "ARG001", # unused param
]
"__init__.py" = ["I002"]
"neps_examples/*" = [
    "INP001",
    "I002",
    "E741",
    "D101",
    "D103",
    "T20",
    "D415",
    "ERA001",
    "E402",
    "E501",
]
"docs/*" = ["INP001"]
# TODO
"neps/optimizers/**.py" = [
  "D", # Documentation of everything
  "ARG002", # Unused arguments, bunch of them in inits
  "PLR0913", # Too many arguments...
]


[tool.ruff.lint.isort]
known-first-party = ["neps"]
known-third-party = []
required-imports = ["from __future__ import annotations"]
no-lines-before = ["future"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10 # Changed from default of 5

[tool.pytest.ini_options]
addopts = "--basetemp ./tests_tmpdir -m 'not ci_examples'"
markers = [
    "ci_examples",
    "core_examples",
    "runtime",
    "neps_api",
    "summary_csv",
]
filterwarnings = "ignore::DeprecationWarning:torch.utils.tensorboard.*:"

[tool.mypy]
python_version = "3.10"  # Match minimum supported version
packages = ["neps"]
show_error_codes = true

namespace_packages = true
explicit_package_bases = true

follow_imports = "normal"

ignore_missing_imports = true

warn_unused_configs = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true

disallow_untyped_defs = true       # All functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true    # ...all types

no_implicit_optional = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["requests"]
ignore_missing_imports = true

[tool.bumpversion]
current_version = "0.13.0"
commit = true
tag = true

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"v{current_version}\""
replace = "version = \"v{new_version}\""

[[tool.bumpversion.files]]
filename = "CITATION.cff"
search = "version: {current_version}"
replace = "version: {new_version}"
