[tool.poetry]
name = "neural-pipeline-search"
version = "v0.12.2"
description = "Neural Pipeline Search helps deep learning experts find the best neural pipeline."
authors = [
  "Danny Stoll <stolld@cs.uni-freiburg.de>",
  "Neeratyoy Mallik <mallik@cs.uni-freiburg.de>",
  "Simon Schrodi",
  "Eddie Bergman",
  "Maciej Janowski",
  "Samir Garibov",
  "Tarek Abou Chakra",
  "Daniel Rogalla",
  "Carl Hvarfner",
  "Binxin Ru",
  "Nils Kober",
  "ThÃ©ophane Vallaeys",
  "Frank Hutter",
]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://github.com/automl/neps"
repository = "https://github.com/automl/neps"
documentation = "https://automl.github.io/neps/"
keywords = [
  "Neural Pipeline Search",
  "Neural Architecture Search",
  "Hyperparameter Optimization",
  "AutoML",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: System :: Distributed Computing",
]
packages = [{ include = "neps" }, { include = "neps_examples" }]


[tool.poetry.dependencies]
python = ">=3.8,<3.12"
ConfigSpace = "^0.7"
grakel = "^0.1"
numpy = "^1"
pandas = "^2"
networkx = "^2.6.3"
nltk = "^3.6.4"
scipy = "^1"
torch = ">1.7.0,!=2.0.1, !=2.1.0"
matplotlib = "^3"
more-itertools = "*"
portalocker = "^2"
seaborn = "^0.13"
pyyaml = "^6"
tensorboard = "^2"
typing-extensions = "*"
torchvision = ">=0.8.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4"
pre-commit = "^3"
mypy = "^1"
pytest = "^7"
pytest-cases = "^3"
psutil = "^6"
types-PyYAML = "^6"
mkdocs-material = "*"
mkdocs-autorefs = "*"
mkdocs-gen-files = "*"
mkdocstrings = { extras = ["python"], version = "*" }
mkdocs-literate-nav = "*"
mike = "*"
black = "*"                                           # This allows mkdocstrings to format signatures in the docs


[tool.poetry.group.experimental]
optional = true

[tool.poetry.group.experimental.dependencies]
gpytorch = "1.8.0"

[build-system]
requires = ["poetry-core>=1.1.0"]
build-backend = "poetry.core.masonry.api"

# TODO(eddiebergman): Include more of these as we go on in migration
# "tests",
# "neps_examples",
[tool.ruff]
target-version = "py38"
output-format = "full"
line-length = 90
src = ["neps"]

# TODO(eddiebergman): Include more of these as we go on in migration
exclude = [
  "neps/optimizers/**/*.py",
  "neps/search_spaces/architecture/**/*.py",
  "neps/search_spaces/yaml_search_space_utils.py",
  "neps/utils/run_args_from_yaml.py",
  "neps/api.py",
  "tests",
  "neps_examples",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs",
]

[tool.ruff.lint]
# Extend what ruff is allowed to fix, even it it may break
# This is okay given we use it all the time and it ensures
# better practices. Would be dangerous if using for first
# time on established project.
extend-safe-fixes = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

select = [
  "A",
  # "ANN", # Handled by mypy
  "ARG",
  "B",
  "BLE",
  "COM",
  "C4",
  "D",
  # "DTZ",  # One day I should know how to utilize timezones and dates...
  "E",
  # "EXE", Meh
  "ERA",
  "F",
  "FBT",
  "I",
  # "ISC",  # Favours implicit string concatenation
  "INP",
  # "INT", # I don't understand this one
  "N",
  "NPY",
  "PD",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PIE",
  "PT",
  "PTH",
  # "PYI", # Specific to .pyi files for type stubs
  "Q",
  "PGH004",
  "RET",
  "RUF",
  "C90",
  "S",
  # "SLF",    # Private member accessed (sure, it's python)
  "SIM",
  # "TRY", # Good in principle, would take a lot of work to statisfy
  "T10",
  "T20",
  "TID",
  "TCH",
  "UP",
  "N",
  "W",
  "YTT",
]

ignore = [
  "D104",    # Missing docstring in public package
  "D105",    # Missing docstring in magic mthod
  "D203",    # 1 blank line required before class docstring
  "D205",    # 1 blank line between summary and description
  "D401",    # First line of docstring should be in imperative mood
  "N806",    # Variable X in function should be lowercase
  "E731",    # Do not assign a lambda expression, use a def
  "A003",    # Shadowing a builtin
  "S101",    # Use of assert detected.
  "W292",    # No newline at end of file
  "PLC1901", # "" can be simplified to be falsey
  "TCH003",  # Move stdlib import into TYPE_CHECKING
  "B010",    # Do not use `setattr`
  "PD901",   # Use a better name than 'df'
  "PD011",   # Use .to_numpy() instead of .values  (triggers on report.values)
  "COM812",  # Require trailing commas, recommended to ignore due to ruff formatter
  "PLR2004", # No magic numbers inline
  "N817",    # CamelCase import as (ignore for ConfigSpace)
  "NPY002",  # Replace legacy `np.random.choice` call with `np.random.Generator`
]


# Exclude a variety of commonly ignored directories.
[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "S101",
  "D101",
  "D102",
  "D103",
  "ANN001",
  "ANN201",
  "FBT001",
  "D100",
  "PD901",  #  X is a bad variable name. (pandas)
  "TCH",
  "N803",
  "C901",   # Too complex
]
"__init__.py" = ["I002"]
"neps_examples/*" = [
  "INP001",
  "I002",
  "E741",
  "D101",
  "D103",
  "T20",
  "D415",
  "ERA001",
  "E402",
  "E501",
]
"docs/*" = ["INP001"]


[tool.ruff.lint.isort]
known-first-party = ["neps"]
known-third-party = []
no-lines-before = ["future"]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
force-wrap-aliases = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10 # Changed from default of 5

[tool.pytest.ini_options]
addopts = "--basetemp ./tests_tmpdir -m 'not ci_examples'"
markers = [
  "ci_examples",
  "core_examples",
  "regression_all",
  "runtime",
  "neps_api",
  "summary_csv",
]
filterwarnings = "ignore::DeprecationWarning:torch.utils.tensorboard.*:"

[tool.mypy]
python_version = "3.8"  # Match minimum supported version
packages = ["neps"]
show_error_codes = true

namespace_packages = true
explicit_package_bases = true

follow_imports = "normal"

ignore_missing_imports = true

warn_unused_configs = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true

disallow_untyped_defs = true       # All functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true    # ...all types

no_implicit_optional = true
check_untyped_defs = true

# TODO(eddiebergman): Improve coverage on these modules
[[tool.mypy.overrides]]
module = [
  "neps.api",
  "neps.optimizers.*",
  "neps.search_spaces.architecture.*",
  "neps.utils.run_args_from_yaml",
]
ignore_errors = true

[tool.poetry.scripts]
neps = "neps.utils.cli:main"
