{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction and Installation","title":"Introduction and Installation"},{"location":"#introduction-and-installation","text":"","title":"Introduction and Installation"},{"location":"CONTRIBUTING/","text":"Contributing Getting Help Ask in the neps developer chat on mattermost or any contributor directly. If you are not in the mattermost chat yet, ask to get access. Development Practices and Tooling Development Workflow We loosely practice trunk-based-development : We work almost exclusively on the master branch We commit, push, and pull often We automatically run code quality checks before every commit (using pre-commit ) We manually run tests (using pytest ) before every critical push and automatically afterwards (using github actions ) Dependency Management To manage dependencies and for package distribution we use poetry (replaces pip). Examples and Tests We document major features with an example (see neps_examples ). When adding a new example also include it in the example README . These examples also serve as integration tests, which we run from the main directory via pytest before every critical push. Running the tests will create a temporary directory tests_tmpdir that includes the output of the last three test executions. To speedup testing for developers, we only run a core set of tests per default. To run all tests use pytest -m all_examples On github, we always run all examples. If tests fail for you on the master: Try running the tests with a fresh environment install. If issues persist, notify others in the neps developers chat on mattermost. Developer Installation There are three required steps and one optional: Optional: Install miniconda and create an environment Install poetry Install the neps package using poetry Activate pre-commit for the repository For instructions see below. 1. Optional: Install miniconda and create an environment To manage python versions install e.g., miniconda with wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O install_miniconda.sh bash install_miniconda.sh -b -p $HOME /.conda # Change to place of preference rm install_miniconda.sh Consider running ~/.conda/bin/conda init or ~/.conda/bin/conda init zsh . Then finally create the environment and activate it conda create -n neps python = 3 .7.5 conda activate neps 2. Install poetry First, install poetry, e.g., via curl -sSL https://install.python-poetry.org | python3 - Then consider appending export PATH = \" $HOME /.local/bin: $PATH \" to your .zshrc / .bashrc or alternatively simply running the export manually. 3. Install the neps Package Using poetry Inside the main directory of neps run poetry install To install specific versions of torch (e.g., cuda enabled versions) you might want to use our utility python -m neps.utils.install_torch 4. Activate pre-commit for the repository With the python environment used to install the neps package run in the main directory of neps pre-commit install Tooling Tips Poetry: Add dependencies To install a dependency use poetry add dependency and commit the updated pyproject.toml to git. For more advanced dependency management see examples in pyproject.toml or have a look at the poetry documentation . Poetry: Install dependencies added by others When other contributors added dependencies to pyproject.toml , you can install them via rm poetry.lock poetry install or also updating dependencies alongside via poetry update Poetry: Publish on PyPI To publish to PyPI: Get publishing rights by asking Danny Think carefully about what you are doing, once on PyPI we can not change things. Run poetry publish --build This will ask for your PyPI credentials. Pre-commit: Do not run hooks To commit without running pre-commit use git commit --no-verify -m <COMMIT MESSAGE> . Pylint: Ignore warnings There are two options: Disable the warning locally: code = \"foo\" # pylint: disable=ERROR_CODE Make sure to use the named version of the error (e.g., unspecified-encoding , not W1514 ). Remove warning in pyproject.toml that we do not consider useful (do not catch bugs, do not increase code quality). Mypy: Ignore warnings There are two options: Disable the warning locally: code = \"foo\" # type: ignore[ERROR_CODE] If you know what you are doing, you can add the whole module to the [[tool.mypy.overrides]] section. This is useful e.g., when adding new files that are in early stage development. Black: Do not format code parts x = 2 # fmt: off or for blocks # fmt: off x = 2 y = x + 1 # fmt: on Documentation (MkDocs) We use MkDocs , more specifically Material for MkDocs for documentation. Source files for the documentation are at docs and configuration at mkdocs.yml . To build and view the documentation run mkdocs build mkdocs serve and open the URL shown by the mkdocs serve command. Editorconfig Editorconfig allows to set line lengths and other display parameters automatically based on a .editorconfig file. Many editors have native support (e.g., PyCharm) so you do not need to do anything. For other editors (e.g., VSCode), you need to install a plugin .","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING/#getting-help","text":"Ask in the neps developer chat on mattermost or any contributor directly. If you are not in the mattermost chat yet, ask to get access.","title":"Getting Help"},{"location":"CONTRIBUTING/#development-practices-and-tooling","text":"","title":"Development Practices and Tooling"},{"location":"CONTRIBUTING/#development-workflow","text":"We loosely practice trunk-based-development : We work almost exclusively on the master branch We commit, push, and pull often We automatically run code quality checks before every commit (using pre-commit ) We manually run tests (using pytest ) before every critical push and automatically afterwards (using github actions )","title":"Development Workflow"},{"location":"CONTRIBUTING/#dependency-management","text":"To manage dependencies and for package distribution we use poetry (replaces pip).","title":"Dependency Management"},{"location":"CONTRIBUTING/#examples-and-tests","text":"We document major features with an example (see neps_examples ). When adding a new example also include it in the example README . These examples also serve as integration tests, which we run from the main directory via pytest before every critical push. Running the tests will create a temporary directory tests_tmpdir that includes the output of the last three test executions. To speedup testing for developers, we only run a core set of tests per default. To run all tests use pytest -m all_examples On github, we always run all examples. If tests fail for you on the master: Try running the tests with a fresh environment install. If issues persist, notify others in the neps developers chat on mattermost.","title":"Examples and Tests"},{"location":"CONTRIBUTING/#developer-installation","text":"There are three required steps and one optional: Optional: Install miniconda and create an environment Install poetry Install the neps package using poetry Activate pre-commit for the repository For instructions see below.","title":"Developer Installation"},{"location":"CONTRIBUTING/#1-optional-install-miniconda-and-create-an-environment","text":"To manage python versions install e.g., miniconda with wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O install_miniconda.sh bash install_miniconda.sh -b -p $HOME /.conda # Change to place of preference rm install_miniconda.sh Consider running ~/.conda/bin/conda init or ~/.conda/bin/conda init zsh . Then finally create the environment and activate it conda create -n neps python = 3 .7.5 conda activate neps","title":"1. Optional: Install miniconda and create an environment"},{"location":"CONTRIBUTING/#2-install-poetry","text":"First, install poetry, e.g., via curl -sSL https://install.python-poetry.org | python3 - Then consider appending export PATH = \" $HOME /.local/bin: $PATH \" to your .zshrc / .bashrc or alternatively simply running the export manually.","title":"2. Install poetry"},{"location":"CONTRIBUTING/#3-install-the-neps-package-using-poetry","text":"Inside the main directory of neps run poetry install To install specific versions of torch (e.g., cuda enabled versions) you might want to use our utility python -m neps.utils.install_torch","title":"3. Install the neps Package Using poetry"},{"location":"CONTRIBUTING/#4-activate-pre-commit-for-the-repository","text":"With the python environment used to install the neps package run in the main directory of neps pre-commit install","title":"4. Activate pre-commit for the repository"},{"location":"CONTRIBUTING/#tooling-tips","text":"","title":"Tooling Tips"},{"location":"CONTRIBUTING/#poetry-add-dependencies","text":"To install a dependency use poetry add dependency and commit the updated pyproject.toml to git. For more advanced dependency management see examples in pyproject.toml or have a look at the poetry documentation .","title":"Poetry: Add dependencies"},{"location":"CONTRIBUTING/#poetry-install-dependencies-added-by-others","text":"When other contributors added dependencies to pyproject.toml , you can install them via rm poetry.lock poetry install or also updating dependencies alongside via poetry update","title":"Poetry: Install dependencies added by others"},{"location":"CONTRIBUTING/#poetry-publish-on-pypi","text":"To publish to PyPI: Get publishing rights by asking Danny Think carefully about what you are doing, once on PyPI we can not change things. Run poetry publish --build This will ask for your PyPI credentials.","title":"Poetry: Publish on PyPI"},{"location":"CONTRIBUTING/#pre-commit-do-not-run-hooks","text":"To commit without running pre-commit use git commit --no-verify -m <COMMIT MESSAGE> .","title":"Pre-commit: Do not run hooks"},{"location":"CONTRIBUTING/#pylint-ignore-warnings","text":"There are two options: Disable the warning locally: code = \"foo\" # pylint: disable=ERROR_CODE Make sure to use the named version of the error (e.g., unspecified-encoding , not W1514 ). Remove warning in pyproject.toml that we do not consider useful (do not catch bugs, do not increase code quality).","title":"Pylint: Ignore warnings"},{"location":"CONTRIBUTING/#mypy-ignore-warnings","text":"There are two options: Disable the warning locally: code = \"foo\" # type: ignore[ERROR_CODE] If you know what you are doing, you can add the whole module to the [[tool.mypy.overrides]] section. This is useful e.g., when adding new files that are in early stage development.","title":"Mypy: Ignore warnings"},{"location":"CONTRIBUTING/#black-do-not-format-code-parts","text":"x = 2 # fmt: off or for blocks # fmt: off x = 2 y = x + 1 # fmt: on","title":"Black: Do not format code parts"},{"location":"CONTRIBUTING/#documentation-mkdocs","text":"We use MkDocs , more specifically Material for MkDocs for documentation. Source files for the documentation are at docs and configuration at mkdocs.yml . To build and view the documentation run mkdocs build mkdocs serve and open the URL shown by the mkdocs serve command.","title":"Documentation (MkDocs)"},{"location":"CONTRIBUTING/#editorconfig","text":"Editorconfig allows to set line lengths and other display parameters automatically based on a .editorconfig file. Many editors have native support (e.g., PyCharm) so you do not need to do anything. For other editors (e.g., VSCode), you need to install a plugin .","title":"Editorconfig"},{"location":"getting_started/","text":"","title":"Getting started"},{"location":"neps_run/","text":"","title":"The neps.run function"},{"location":"parallelization/","text":"","title":"Parallelization"},{"location":"pipeline_space/","text":"","title":"The pipeline_space"},{"location":"run_pipeline/","text":"","title":"The run_pipeline function"},{"location":"status/","text":"","title":"Analysing runs"}]}