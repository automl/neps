from __future__ import annotations

from pathlib import Path

import pytest

from neps.optimizers.bayesian_optimization.optimizer import BayesianOptimization
from neps.utils.run_args import Default, Settings
from tests.test_yaml_run_args.test_yaml_run_args import (
    evaluate_pipeline,
    hook1,
    hook2,
    pipeline_space,
)

BASE_PATH = Path("tests") / "test_settings"
evaluate_pipeline = evaluate_pipeline
hook1 = hook1
hook2 = hook2
pipeline_space = pipeline_space
my_bayesian = BayesianOptimization


@pytest.mark.neps_api
@pytest.mark.parametrize(
    ("func_args", "yaml_args", "expected_output"),
    [
        (
            {  # only essential arguments provided by func_args, no yaml
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "run_args": Default(None),
                "overwrite_working_directory": Default(False),
                "post_run_summary": Default(True),
                "development_stage_id": Default(None),
                "task_id": Default(None),
                "max_evaluations_total": 10,
                "max_evaluations_per_run": Default(None),
                "continue_until_max_evaluation_completed": Default(False),
                "max_cost_total": Default(None),
                "ignore_errors": Default(False),
                "objective_to_minimize_value_on_error": Default(None),
                "cost_value_on_error": Default(None),
                "pre_load_hooks": Default(None),
                "searcher": Default("default"),
                "searcher_kwargs": {},
                "sample_batch_size": Default(None),
            },
            Default(None),
            {
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "overwrite_working_directory": False,
                "post_run_summary": True,
                "development_stage_id": None,
                "task_id": None,
                "max_evaluations_total": 10,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": "default",
                "searcher_kwargs": {},
                "sample_batch_size": None,
            },
        ),
        (
            {  # only required elements of run_args
                "evaluate_pipeline": Default(None),
                "root_directory": Default(None),
                "pipeline_space": Default(None),
                "run_args": Default(None),
                "overwrite_working_directory": Default(False),
                "post_run_summary": Default(True),
                "development_stage_id": Default(None),
                "task_id": Default(None),
                "max_evaluations_total": Default(None),
                "max_evaluations_per_run": Default(None),
                "continue_until_max_evaluation_completed": Default(False),
                "max_cost_total": Default(None),
                "ignore_errors": Default(False),
                "objective_to_minimize_value_on_error": Default(None),
                "cost_value_on_error": Default(None),
                "pre_load_hooks": Default(None),
                "searcher": Default("default"),
                "searcher_kwargs": {},
                "sample_batch_size": Default(None),
            },
            "run_args_required.yaml",
            {
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "overwrite_working_directory": False,
                "post_run_summary": True,
                "development_stage_id": None,
                "task_id": None,
                "max_evaluations_total": 10,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": "default",
                "searcher_kwargs": {},
                "sample_batch_size": None,
            },
        ),
        (
            {  # required via func_args, optional via yaml
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "run_args": "tests/path/to/run_args",  # will be ignored by Settings
                "overwrite_working_directory": Default(False),
                "post_run_summary": Default(True),
                "development_stage_id": Default(None),
                "task_id": Default(None),
                "max_evaluations_total": 10,
                "max_evaluations_per_run": Default(None),
                "continue_until_max_evaluation_completed": Default(False),
                "max_cost_total": Default(None),
                "ignore_errors": Default(False),
                "objective_to_minimize_value_on_error": Default(None),
                "cost_value_on_error": Default(None),
                "pre_load_hooks": Default(None),
                "searcher": Default("default"),
                "searcher_kwargs": {},
                "sample_batch_size": Default(None),
            },
            "run_args_optional.yaml",
            {
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "overwrite_working_directory": True,
                "post_run_summary": False,
                "development_stage_id": None,
                "task_id": None,
                "max_evaluations_total": 10,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": "hyperband",
                "searcher_kwargs": {},
                "sample_batch_size": None,
            },
        ),
        (
            {  # overwrite all yaml values
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "run_args": "test",
                "overwrite_working_directory": False,
                "post_run_summary": True,
                "development_stage_id": 5,
                "task_id": None,
                "max_evaluations_total": 17,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": "default",
                "searcher_kwargs": {},
                "sample_batch_size": Default(None),
            },
            "overwrite_run_args.yaml",
            {
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "overwrite_working_directory": False,
                "post_run_summary": True,
                "development_stage_id": 5,
                "task_id": None,
                "max_evaluations_total": 17,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": "default",
                "searcher_kwargs": {},
                "sample_batch_size": None,
            },
        ),
        (
            {  # optimizer args special case
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "run_args": "test",
                "overwrite_working_directory": False,
                "post_run_summary": True,
                "development_stage_id": 5,
                "task_id": None,
                "max_evaluations_total": 17,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": Default("default"),
                "searcher_kwargs": {
                    "initial_design_type": "max_budget",
                    "use_priors": False,
                    "random_interleave_prob": 0.0,
                    "sample_prior_first": False,
                    "sample_prior_at_target": False,
                },
                "sample_batch_size": Default(None),
            },
            "run_args_optimizer_settings.yaml",
            {
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "overwrite_working_directory": False,
                "post_run_summary": True,
                "development_stage_id": 5,
                "task_id": None,
                "max_evaluations_total": 17,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": {
                    "strategy": "hyperband",
                    "eta": 3,
                    "initial_design_type": "max_budget",
                    "use_priors": False,
                    "random_interleave_prob": 0.0,
                    "sample_prior_first": False,
                    "sample_prior_at_target": False,
                },
                "searcher_kwargs": {
                    "initial_design_type": "max_budget",
                    "use_priors": False,
                    "random_interleave_prob": 0.0,
                    "sample_prior_first": False,
                    "sample_prior_at_target": False,
                },
                "sample_batch_size": None,
            },
        ),
        (
            {  # load optimizer with args
                "evaluate_pipeline": Default(None),
                "root_directory": Default(None),
                "pipeline_space": Default(None),
                "run_args": Default(None),
                "overwrite_working_directory": Default(False),
                "post_run_summary": Default(True),
                "development_stage_id": Default(None),
                "task_id": Default(None),
                "max_evaluations_total": Default(None),
                "max_evaluations_per_run": Default(None),
                "continue_until_max_evaluation_completed": Default(False),
                "max_cost_total": Default(None),
                "ignore_errors": Default(False),
                "objective_to_minimize_value_on_error": Default(None),
                "cost_value_on_error": Default(None),
                "pre_load_hooks": Default(None),
                "searcher": Default("default"),
                "searcher_kwargs": {
                    "initial_design_size": 9,
                },
                "sample_batch_size": Default(None),
            },
            "run_args_optimizer_outside.yaml",
            {
                "evaluate_pipeline": evaluate_pipeline,
                "root_directory": "path/to/root_directory",
                "pipeline_space": pipeline_space,
                "overwrite_working_directory": True,
                "post_run_summary": True,
                "development_stage_id": None,
                "task_id": None,
                "max_evaluations_total": 10,
                "max_evaluations_per_run": None,
                "continue_until_max_evaluation_completed": False,
                "max_cost_total": None,
                "ignore_errors": False,
                "objective_to_minimize_value_on_error": None,
                "cost_value_on_error": None,
                "pre_load_hooks": None,
                "searcher": my_bayesian,
                "searcher_kwargs": {"initial_design_size": 9},
                "sample_batch_size": None,
            },
        ),
    ],
)
def test_check_settings(func_args: dict, yaml_args: str, expected_output: dict) -> None:
    """Check if expected settings are set."""
    args = BASE_PATH / yaml_args if isinstance(yaml_args, str) else yaml_args

    settings = Settings(func_args, args)
    for key, value in expected_output.items():
        assert getattr(settings, key) == value


@pytest.mark.neps_api
@pytest.mark.parametrize(
    ("func_args", "yaml_args", "error"),
    [
        (
            {
                "root_directory": Default(None),
                "pipeline_space": Default(None),
                "run_args": Default(None),
                "overwrite_working_directory": Default(False),
                "post_run_summary": Default(True),
                "development_stage_id": Default(None),
                "task_id": Default(None),
                "max_evaluations_total": Default(None),
                "max_evaluations_per_run": Default(None),
                "continue_until_max_evaluation_completed": Default(False),
                "max_cost_total": Default(None),
                "ignore_errors": Default(False),
                "objective_to_minimize_value_on_error": Default(None),
                "cost_value_on_error": Default(None),
                "pre_load_hooks": Default(None),
                "searcher": Default("default"),
                "searcher_kwargs": {},
                "sample_batch_size": Default(None),
            },
            Default(None),
            ValueError,
        )
    ],
)
def test_settings_initialization_error(
    func_args: dict, yaml_args: str | Default, error: type[Exception]
) -> None:
    """Test if Settings raises Error when essential arguments are missing."""
    with pytest.raises(error):
        Settings(func_args, yaml_args)
